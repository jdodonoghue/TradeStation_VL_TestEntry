//jo_VerticalLine_SE
 
using elsystem; 
using tsdata.common;  
using tsdata.marketdata; 
using elsystem.drawing; 
using elsystem.drawingobjects;
using elsystem.collections; 

input: sellOffset(0.25);

var: Vector dataList(null);
var: DateTime barDate(null);   
var: string sBarDate("");
vars: sellSignal(false);

method void AnalysisTechnique_Initialized( elsystem.Object sender, elsystem.InitializedEventArgs args ) 
begin
	If barNumber = 1 then
  		Cleardebug(); 
	dataList = new Vector();
	BuildVLList();
end;

method void BuildVLList()
vars: VerticalLine myVLine, int cnt, int objectCount, int MyObjects, string lst, string vlPos, string sDate;
Begin
	MyObjects = ObjectCategory.VerticalLineCreatedByDrawingObject;
	objectCount = DrawingObjects.Items[MyObjects].Count;
	
	if objectCount = 0 then 
	begin
		dataList = new Vector();
		return;  
	end;
	
	for cnt = 0 to objectCount - 1  
	Begin
  		myVLine = DrawingObjects.Items[MyObjects][cnt] astype VerticalLine ;
  		myVLine.ShowTime = true;
  		
  		If myVLine.Color = elsystem.drawing.Color.Red Then
  		Begin
  			vlPos = myVLine.Position.ToString();
  			If vlPos.Length > 0 Then
			Begin
				vlPos = vlPos.Remove(vlPos.IndexOf("Price:"));
				sDate = vlPos.Substring(vlPos.IndexOf("DateTime") + 9).Trim();
    			lst = lst + sdate + "|";
			End;	
  		End;
  	End; 
	if lst.Length > 0 Then
	Begin
		lst = lst.Substring(0, lst.Length - 1);
		dataList = lst.Split("|"); 
	end;
End;  
	 
method bool findVL(string inputValue)
var: bool ret, int cnt, string curValue;
Begin
	ret = false;
	
	for cnt = 0 to dataList.Count - 1
	Begin
		curValue = dataList.Items[cnt].ToString();
		If inputValue = curValue Then
  		Begin
  			ret = true;
			return ret;
  		End;
	End;
	
	return ret;
End;	
	
If Marketposition = 0 Then
Begin
	sellSignal = false;	
	barDate = DateTime.FromELDateAndTime(date, time, BarDateTime.Second);
	sBarDate = barDate.ToString();
	
	If findVL(sBarDate) Then
	Begin
		sellSignal = true;
	End;

	If sellSignal = true Then 
	Begin
		Sell Short next Bar Low[0] - sellOffset Stop;
	End;
End;
	
